#!perl
#
$|=1;
#
#
use Term::ANSIColor;
use Git::Class;
#
#
my $UNTRACKED=0;
my $UNCOMMITED=0;
my $git= Git::Class::Cmd->new();
foreach my $line ( $git->status )
	{
	chomp $line;
	my $ll = substr( $line,0,1 );
	my $lr = substr( $line,1 );
	if ( grep(/^# Untracked files:/,$line ) ) 
		{ 
		$UNTRACKED=1; 
		print colored( "$line\n", "red" ); 
		}
	elsif ( grep(/^# Changes to be committed:/,$line ) ) 
		{ 
		$UNCOMMITED=1; 
		print colored( "$line\n", "yellow" ); 
		}
	elsif ( grep(/^# Changes not staged for commit:/,$line ) ) 
		{ 
		$UNTRACKED=1; 
		print colored( "$line\n", "red" ); 
		}
		elsif ( grep(/^# On branch/,$line ) ) 
		{
		$lr =~ s# On branch ##;
		print colored( "$ll", "green" ); 
		print colored( " On branch ", "white" );
		print colored( "$lr\n","green");
		}
	elsif ( grep(/use "git add"/,$line ) ) 
		{ 
		$UNTRACKED=0;
		$UNCOMMITED=0;
		print colored( "$line\n", "bold white" ); 
		}


	elsif ( $UNTRACKED ) 
		{
		if ( grep( /use "git add/,$line ) || grep( /use "git checkout/,$line ) ) 
			{
			#print colored( "$ll", "red" ); 
			print colored( "$line\n","white"); 
			}
		elsif ( length( $line ) > 2 ) 
			{ 
			print colored( "$ll", "red" ); 
			print colored( "$lr\n","bold red");
			}
		else { print colored( "$ll\n", "white" ); }
		}
	elsif ( $UNCOMMITED ) 
		{
		if ( grep( /use "git reset HEAD/,$line ) ) 
			{
			#print colored( "$ll", "yellow" ); 
			print colored( "$line\n","white"); 
			}
		elsif ( length( $line ) > 2 ) 
			{ 
			print colored( "$ll", "yellow" ); 
			print colored( "$lr\n","bold yellow");
			}
		else { print colored( "$ll\n", "white" ); }
		}
	else { print $line . "\n"; }
	
	}

